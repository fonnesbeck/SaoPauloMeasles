library(emdbook)
pf.bb.gomp<-function(par,vecs,lik=1,n.particles=1000){#
 cat(par,".\n")	#
 	k<-1																		# a bit of accounting to allow fitting with some parameters held constant#
 	for(i in 1:length(vecs$parameters)){#
 		 		if(is.na(vecs$parameters[i])){assign(paste("theta",i,sep=""),par[k])#
 										  k<-k+1}#
 		else{assign(paste("theta",i,sep=""),vecs$parameters[i])}#
 		}#
 	beta1<-exp(theta1)					# transmission rate #
 	beta2<-exp(theta2)					# transmission rate #
 	beta3<-1/(exp(-theta3)+1) 			# initial susceptibles#
 	beta4<-1/(exp(-theta4)+1)			# observation rate pre 2005#
 	beta5<-1/(exp(-theta5)+1)			# observation rate post 2005#
 	beta6<-exp(theta6)					# process variance#
 	beta7<-exp(theta7)					# over-dispersion#
 	N<-vecs$pop#
 	X<-vecs$X#
 	SIA<-vecs$sia#
 	I.obs<-vecs$Ir#
 	report<-vecs$reporting#
 	S<-matrix(rep(N[1],n.particles)*beta3,nr=n.particles,nc=1,byrow=F)#
 	I<-matrix(NA,nr=n.particles,nc=1,byrow=F)#
 	weights<-numeric(0)#
 	for(i in 1:length(X)){	#
 		I.t<-rbetabinom(n.particles,size=round(S[,i]),prob=(exp(-beta1*exp(-beta2*S[,i]/N[i]))),theta=beta6 )#
 		S.t<- (S[,i] + X[i] - I.t)*(1-SIA[i]*.95) #
 		#browser()#
 		ifelse(!is.na(outbreaks[i]),#
 		p<-dbetabinom(I.obs[i],size=round(I.t),prob=beta4,theta=beta7),#
 		p<-dbetabinom(I.obs[i],size=round(I.t),prob=beta4+beta5,theta=beta7))#
 		p.samp<-p/sum(p,na.rm=T)#
 		p.samp[!is.finite(p.samp)]<-0#
 		if(all(p.samp==0)){return(999)}#
 		if(is.na(sum(p.samp))){browser()}#
 		p.ind<-sample(1:n.particles,n.particles,p.samp,replace=T)#
 		S<-cbind(S,S.t[p.ind])#
 		I<-cbind(I,I.t[p.ind])#
 		weights<-cbind(weights,p[p.ind])		#
 	}	#
 ifelse(lik==1,return(-sum(weights)/n.particles),return(list(S=S,I=I,weights=weights,nll=-sum(weights)/n.particles)))#
 }#
allcases<-read.csv("casesCHN6.csv",header=F,row.names=1)#
allbirths<-read.csv("birthsCHN6.csv",header=F,row.names=1)#
alldeaths<-read.csv("deaths_5CHN6.csv",header=F,row.names=1)#
allpop<-read.csv("populationsCHN6.csv",header=F,row.names=1)#
allmcv1<-read.csv("mcv1CHN6.csv",header=F,row.names=1)#
mcv1.12mo<-read.csv("mcv1vaxeffCHN6.csv",header=F,row.names=1)#
allmcv2<-read.csv("mcv2CHN6.csv",header=F,row.names=1)#
allsia<-read.csv("siaCHN6.csv",header=F,row.names=1)#
first.surveillance<-unlist(read.csv("first.surveillanceCHN6.csv",header=F,row.names=1)$V2)  # take column 2 data only#
outbreaks<-read.csv("outbreaksCHN6.csv",header=F,row.names=1) #
source("datainput.R") # functions to process the data#
#
I.fitted<-numeric(0)#
par.fitted<-numeric(0)#
nll<-numeric(0)#
for(k in 1:10){#
w<-1#
n.years<-dim(allcases)[2]        # total year number, can change#
allcases.w<-allcases[w,first.surveillance[w]:n.years]       # get data for that province#
allbirths.w<-allbirths[w,first.surveillance[w]:n.years]#
alldeaths.w<-alldeaths[w,first.surveillance[w]:n.years]#
allpop.w<-allpop[w,first.surveillance[w]:n.years]#
allmcv1.w<-allmcv1[w,first.surveillance[w]:n.years]#
mcv1.12mo.w<-mcv1.12mo[w,1]#
allmcv2.w<-allmcv2[w,first.surveillance[w]:n.years]#
allsia.w<-allsia[w,first.surveillance[w]:n.years]#
outbreaks.w<-outbreaks[w,first.surveillance[w]:n.years]#
vecs<-datainput(allbirths.w,allcases.w,alldeaths.w,allpop.w,allsia.w,allmcv1.w,mcv1.12mo.w,allmcv2.w,outbreaks.w)     # prepare input data file for a country#
vecs$reporting<-as.numeric(is.na(vecs$outbreaks))#
vecs$parameters<-rep(NA,7)#
init<-c(log(4.640498),-1,-3,0,-1,5,log(10))#
if(k>1){init<-tst$par + runif(7)}#
tst<-optim(,pf.bb.gomp,vecs=vecs,lik=1,n.particles=1e4)#
fitted<-pf.bb.gomp(tst$par,vecs,lik=0,n.particles=1e4)#
I.fitted<-rbind(I.fitted,apply(fitted$I,2,mean))#
par.fitted<-rbind(par.fitted,tst$par)#
nll<-c(nll,tst$value)#
}
I.fitted<-numeric(0)#
par.fitted<-numeric(0)#
nll<-numeric(0)#
for(k in 1:10){#
w<-1#
n.years<-dim(allcases)[2]        # total year number, can change#
allcases.w<-allcases[w,first.surveillance[w]:n.years]       # get data for that province#
allbirths.w<-allbirths[w,first.surveillance[w]:n.years]#
alldeaths.w<-alldeaths[w,first.surveillance[w]:n.years]#
allpop.w<-allpop[w,first.surveillance[w]:n.years]#
allmcv1.w<-allmcv1[w,first.surveillance[w]:n.years]#
mcv1.12mo.w<-mcv1.12mo[w,1]#
allmcv2.w<-allmcv2[w,first.surveillance[w]:n.years]#
allsia.w<-allsia[w,first.surveillance[w]:n.years]#
outbreaks.w<-outbreaks[w,first.surveillance[w]:n.years]#
vecs<-datainput(allbirths.w,allcases.w,alldeaths.w,allpop.w,allsia.w,allmcv1.w,mcv1.12mo.w,allmcv2.w,outbreaks.w)     # prepare input data file for a country#
vecs$reporting<-as.numeric(is.na(vecs$outbreaks))#
vecs$parameters<-rep(NA,7)#
init<-c(log(4.640498),-1,-3,0,-1,5,log(10))#
if(k>1){init<-tst$par + runif(7)}#
tst<-optim(init,pf.bb.gomp,vecs=vecs,lik=1,n.particles=1e4)#
fitted<-pf.bb.gomp(tst$par,vecs,lik=0,n.particles=1e4)#
I.fitted<-rbind(I.fitted,apply(fitted$I,2,mean))#
par.fitted<-rbind(par.fitted,tst$par)#
nll<-c(nll,tst$value)#
}
i
k
names(fitted)
tst
fitted<-pf.bb.gomp(tst$par,vecs,lik=0,n.particles=1e4)
fitted
fitted<-pf.bb.gomp(par=tst$par,vecs=vecs,lik=0,n.particles=1e4)
fitted
fitted<-pf.bb.gomp(par=tst$par,vecs=vecs,lik=1,n.particles=1e4)
fitted
init<-c(log(4.640498),-1,-3,0,-1,5,log(10))
tst<-optim(init,pf.bb.gomp,vecs=vecs,lik=1,n.particles=1e4)
tst
init<-tst$par + runif(7)
init
tst<-optim(init,pf.bb.gomp,vecs=vecs,lik=1,n.particles=1e4)
tst
tst.par<-c(1.8667815, -1.0555783, -2.9114909,  0.6443041, -0.6562826,  4.5202198 , 2.3457563)
init<-tst$par + .25*runif(7)
tst<-optim(init,pf.bb.gomp,vecs=vecs,lik=1,n.particles=1e4)
tst
init<-tst.par + rnorm(7,0,sqrt(abs(tst.par)))
init
tst.par
init<-tst.par + rnorm(7,0,.1*(abs(tst.par)))
init
tst<-optim(init,pf.bb.gomp,vecs=vecs,lik=1,n.particles=1e4)
tst
tst<-optim(tst.par,pf.bb.gomp,vecs=vecs,lik=1,n.particles=1e4)
tst
tst.par
tst2<-optim(tst$par,pf.bb.gomp,method="L-BFGS-B",lower=tst$par-.1,upper=tst$par+.1,vecs=vecs,lik=1,n.particles=1e4,hessian=T)
tst2
sqrt(solve(tst2$hessian))
tst.par
tst2$par
w<-1#
#
n.years<-dim(allcases)[2]        # total year number, can change#
allcases.w<-allcases[w,first.surveillance[w]:n.years]       # get data for that province#
allbirths.w<-allbirths[w,first.surveillance[w]:n.years]#
alldeaths.w<-alldeaths[w,first.surveillance[w]:n.years]#
allpop.w<-allpop[w,first.surveillance[w]:n.years]#
allmcv1.w<-allmcv1[w,first.surveillance[w]:n.years]#
mcv1.12mo.w<-mcv1.12mo[w,1]#
allmcv2.w<-allmcv2[w,first.surveillance[w]:n.years]#
allsia.w<-allsia[w,first.surveillance[w]:n.years]#
outbreaks.w<-outbreaks[w,first.surveillance[w]:n.years]#
vecs<-datainput(allbirths.w,allcases.w,alldeaths.w,allpop.w,allsia.w,allmcv1.w,mcv1.12mo.w,allmcv2.w,outbreaks.w)     # prepare input data file for a country#
vecs$reporting<-as.numeric(is.na(vecs$outbreaks))#
vecs$parameters<-rep(NA,7)#
#
lower<-c(-1,-3,-5,-5,-5,1,1)		#set bounds for search -- this is the prior #
upper<-c( 3, 3, 0, 2, 0,7,5)		#set bounds for search -- this is the prior#
#
ll<-numeric(5000)#
par<-matrix(NA,5000,7)#
for(i in 1:5000){#
vecs$parameters<-rep(NA,7)#
init<-runif(7,lower,upper)	# this sets a uniform prior#
par[i,]<-init#
ll[i]<--pf.bb.gomp(init,vecs,lik=1,n.particles=5000)#
cat(i,".\n")#
}
pf.bb.gomp<-function(par,vecs,lik=1,n.particles=1000){#
 #cat(par,".\n")	#
 	k<-1																		# a bit of accounting to allow fitting with some parameters held constant#
 	for(i in 1:length(vecs$parameters)){#
 		 		if(is.na(vecs$parameters[i])){assign(paste("theta",i,sep=""),par[k])#
 										  k<-k+1}#
 		else{assign(paste("theta",i,sep=""),vecs$parameters[i])}#
 		}#
 	beta1<-exp(theta1)					# transmission rate #
 	beta2<-exp(theta2)					# transmission rate #
 	beta3<-1/(exp(-theta3)+1) 			# initial susceptibles#
 	beta4<-1/(exp(-theta4)+1)			# observation rate pre 2005#
 	beta5<-1/(exp(-theta5)+1)			# observation rate post 2005#
 	beta6<-exp(theta6)					# process variance#
 	beta7<-exp(theta7)					# over-dispersion#
 	N<-vecs$pop#
 	X<-vecs$X#
 	SIA<-vecs$sia#
 	I.obs<-vecs$Ir#
 	report<-vecs$reporting#
 	S<-matrix(rep(N[1],n.particles)*beta3,nr=n.particles,nc=1,byrow=F)#
 	I<-matrix(NA,nr=n.particles,nc=1,byrow=F)#
 	weights<-numeric(0)#
 	for(i in 1:length(X)){	#
 		I.t<-rbetabinom(n.particles,size=round(S[,i]),prob=(exp(-beta1*exp(-beta2*S[,i]/N[i]))),theta=beta6 )#
 		S.t<- (S[,i] + X[i] - I.t)*(1-SIA[i]*.95) #
 		#browser()#
 		ifelse(!is.na(outbreaks[i]),#
 		p<-dbetabinom(I.obs[i],size=round(I.t),prob=beta4,theta=beta7),#
 		p<-dbetabinom(I.obs[i],size=round(I.t),prob=beta4+beta5,theta=beta7))#
 		p.samp<-p/sum(p,na.rm=T)#
 		p.samp[!is.finite(p.samp)]<-0#
 		if(all(p.samp==0)){return(999)}#
 		if(is.na(sum(p.samp))){browser()}#
 		p.ind<-sample(1:n.particles,n.particles,p.samp,replace=T)#
 		S<-cbind(S,S.t[p.ind])#
 		I<-cbind(I,I.t[p.ind])#
 		weights<-cbind(weights,p[p.ind])		#
 	}	#
 ifelse(lik==1,return(-sum(weights)/n.particles),return(list(S=S,I=I,weights=weights,nll=-sum(weights)/n.particles)))#
 }
w<-1#
#
n.years<-dim(allcases)[2]        # total year number, can change#
allcases.w<-allcases[w,first.surveillance[w]:n.years]       # get data for that province#
allbirths.w<-allbirths[w,first.surveillance[w]:n.years]#
alldeaths.w<-alldeaths[w,first.surveillance[w]:n.years]#
allpop.w<-allpop[w,first.surveillance[w]:n.years]#
allmcv1.w<-allmcv1[w,first.surveillance[w]:n.years]#
mcv1.12mo.w<-mcv1.12mo[w,1]#
allmcv2.w<-allmcv2[w,first.surveillance[w]:n.years]#
allsia.w<-allsia[w,first.surveillance[w]:n.years]#
outbreaks.w<-outbreaks[w,first.surveillance[w]:n.years]#
vecs<-datainput(allbirths.w,allcases.w,alldeaths.w,allpop.w,allsia.w,allmcv1.w,mcv1.12mo.w,allmcv2.w,outbreaks.w)     # prepare input data file for a country#
vecs$reporting<-as.numeric(is.na(vecs$outbreaks))#
vecs$parameters<-rep(NA,7)#
#
lower<-c(-1,-3,-5,-5,-5,1,1)		#set bounds for search -- this is the prior #
upper<-c( 3, 3, 0, 2, 0,7,5)		#set bounds for search -- this is the prior#
#
ll<-numeric(5000)#
par<-matrix(NA,5000,7)#
for(i in 1:5000){#
vecs$parameters<-rep(NA,7)#
init<-runif(7,lower,upper)	# this sets a uniform prior#
par[i,]<-init#
ll[i]<--pf.bb.gomp(init,vecs,lik=1,n.particles=5000)#
cat(i,".\n")#
}
ll[1:2148]
hist(ll[1:2148])
hist(exp(ll[1:2148]))
hist(exp(ll[1:2148]),breaks=seq(0,1.2,length=500))
hist(exp(ll[1:2148]),breaks=seq(0,1.2,length=500),xlim=c(1,1.2))
ind<-sample(1:2148,1000,exp(ll),replace=T)
ind<-sample(1:2148,1000,exp(ll[1:2148]),replace=T)
ind
post1<-par[ind,]
par(mfrow=c(2,4));apply(post1,2,hist)
ll.t<-ll[1:2148]
ll.t<-ll.t[exp(ll)>1]
length(ll.t)
ind<-sample(1:1687,1000,exp(ll.t),replace=T)
post1<-par[exp(ll)>1][ind,]
post1<-par[exp(ll)>1,][ind,]
par(mfrow=c(2,4));apply(post1,2,hist)
tst.par
plot(par[,1],ll)
par[,1]
par(mfrow=c(1,1))
plot(par[,1],ll)
plot(par[,1],ll,pch=19,col=rgb(1,0,0,.1))
plot(par[,1],ll,pch=19,col=rgb(1,0,0,.1),ylim=c(0,1))
plot(par[,1],exp(ll),pch=19,col=rgb(1,0,0,.1),ylim=c(0,1))
plot(par[,1],exp(ll),pch=19,col=rgb(1,0,0,.1),ylim=c(1,5))
plot(par[,1],exp(ll),pch=19,col=rgb(1,0,0,.1),ylim=c(1,3))
plot(par[,1],exp(ll),pch=19,col=rgb(1,0,0,.1),ylim=c(1,2))
plot(par[,2],exp(ll),pch=19,col=rgb(1,0,0,.1),ylim=c(1,2))
plot(par[,3],exp(ll),pch=19,col=rgb(1,0,0,.1),ylim=c(1,2))
plot(par[,4],exp(ll),pch=19,col=rgb(1,0,0,.1),ylim=c(1,2))
plot(par[,5],exp(ll),pch=19,col=rgb(1,0,0,.1),ylim=c(1,2))
plot(par[,6],exp(ll),pch=19,col=rgb(1,0,0,.1),ylim=c(1,2))
plot(par[,7],exp(ll),pch=19,col=rgb(1,0,0,.1),ylim=c(1,2))
par(mfrow=c(2,4));apply(post1,2,hist)
tst.par
pf.bb.gomp(tst.par,vecs,lik=1,n.particles=5000)
tst.par[5]<--4
pf.bb.gomp(tst.par,vecs,lik=1,n.particles=5000)
tst.par[5]<-1
pf.bb.gomp(tst.par,vecs,lik=1,n.particles=5000)
pf.bb.gomp(tst.par,vecs,lik=.5,n.particles=5000)
pf.bb.gomp(tst.par,vecs,lik=0,n.particles=5000)
pf.bb.gomp(tst.par,vecs,lik=-.5,n.particles=5000)
pf.bb.gomp(tst.par,vecs,lik=-.6,n.particles=5000)
pf.bb.gomp(tst.par,vecs,lik=1,n.particles=5000)
tst.par[5]<-0
pf.bb.gomp(tst.par,vecs,lik=1,n.particles=5000)
tst.par[5]<--.5
pf.bb.gomp(tst.par,vecs,lik=1,n.particles=5000)
tst.par[5]<--.6
pf.bb.gomp(tst.par,vecs,lik=1,n.particles=5000)
tst.par[5]<--.7
pf.bb.gomp(tst.par,vecs,lik=1,n.particles=5000)
tst.par[5]<--.656
pf.bb.gomp(tst.par,vecs,lik=1,n.particles=5000)
tst.par[4]<--3
pf.bb.gomp(tst.par,vecs,lik=1,n.particles=5000)
ll
ll[1:1687]
hist(ll.t)
plot(1:1687,ll.t)
par(mfrow=c(1,1));plot(1:1687,ll.t)
exp(ll.t)
exp(ll.t)/sum(exp(ll.t))
hist(exp(ll.t)/sum(exp(ll.t)))
sum(exp(ll.t)/sum(exp(ll.t)))
hist((ll.t)/sum((ll.t)))
ind
ll[ind]
ind<-sample(1:1628,1000,exp(ll),replace=T)
ind<-sample(1:1628,1000,exp(ll[1:1628]),replace=T)
mean(ll[ind])
mean(ll[1:1628])
hist(ll[ind])
hist(par[ind,1])
hist(par[ind,2])
hist(par[ind,3])
hist(par[ind,4])
hist(par[ind,5])
hist(par[ind,6])
par<-matrix(runif(7*iter,lower,upper),iter,7,byrow=T)
iter<-5000
par<-matrix(runif(7*iter,lower,upper),iter,7,byrow=T)
summary(par)
iter<-1000#
#
ll<-numeric(iter)#
par<-matrix(runif(7*iter,lower,upper),iter,7,byrow=T)#
for(i in 1:iter){#
vecs$parameters<-rep(NA,7)#
ll[i]<--pf.bb.gomp(par[i,],vecs,lik=1,n.particles=5000)#
cat(i,".\n")#
}
ll
ind<-sample(1:1000,1000,exp(ll),replace=T)
hist(ll)
hist(ll[ind],col=2)
hist(exp(ll))
hist(exp(ll),breaks=seq(0,3,length=500))
hist(ll[ind],col=2,breaks=seq(0,3,length=500))
hist(exp(ll),breaks=seq(0,3,length=500))
hist(ll[ind],col=2,breaks=seq(0,3,length=500),add=T)
hist(exp(ll),breaks=seq(0,3,length=500))
hist(exp(ll[ind]),col=2,breaks=seq(0,3,length=500),add=T)
ll[ll==999]<-NA
ll
ll[ll==-999]<-NA
ll
ind<-sample(1:1000,1000,exp(ll),replace=T)
ll[ll==-999]<-0
ind<-sample(1:1000,1000,exp(ll),replace=T)
exp(ll)
ll
ll[is.na(ll)]<-0
ind<-sample(1:1000,1000,exp(ll),replace=T)
ind
hist(exp(ll[ind]),col=4,breaks=seq(0,3,length=500),add=T)
ind<-sample(1:1000,10000,exp(ll),replace=T)
hist(exp(ll[ind]),col=4,breaks=seq(0,3,length=500),add=T)
exp(ll)
ind<-sample(1:1000,10000,exp(ll)-1,replace=T)
ind
ind<-sample(1:1000,100,exp(ll)-1,replace=T)
ind
exp(ll)-1
ind<-sample(1:1000,100,exp(ll)-1,replace=T)
hist(ll[ind])
hist(exp(ll),col=4,breaks=seq(0,3,length=500),add=T)
hist(exp(ll),col=4,breaks=seq(0,3,length=500))
hist(exp(ll[ind]),col=2,breaks=seq(0,3,length=500),add=T)
hist(exp(ll),col=4,breaks=seq(0,3,length=500),xlim=c(1,2.5))
ind<-sample(1:1000,1000,exp(ll)-1,replace=T)
hist(exp(ll[ind]),col=2,breaks=seq(0,3,length=500),add=T)
tmp<-par[ind,]
par(mfrow=c(2,4));apply(tmp,2,hist)
par(mfrow=c(2,4));apply(tmp,2,hist,breaks=seq(-5,5,length=100))
pairs(tmp)
pairs(tmp,pch=19,col=rgb(1,0,0,.1))
w<-1#
#
n.years<-dim(allcases)[2]        # total year number, can change#
allcases.w<-allcases[w,first.surveillance[w]:n.years]       # get data for that province#
allbirths.w<-allbirths[w,first.surveillance[w]:n.years]#
alldeaths.w<-alldeaths[w,first.surveillance[w]:n.years]#
allpop.w<-allpop[w,first.surveillance[w]:n.years]#
allmcv1.w<-allmcv1[w,first.surveillance[w]:n.years]#
mcv1.12mo.w<-mcv1.12mo[w,1]#
allmcv2.w<-allmcv2[w,first.surveillance[w]:n.years]#
allsia.w<-allsia[w,first.surveillance[w]:n.years]#
outbreaks.w<-outbreaks[w,first.surveillance[w]:n.years]#
vecs<-datainput(allbirths.w,allcases.w,alldeaths.w,allpop.w,allsia.w,allmcv1.w,mcv1.12mo.w,allmcv2.w,outbreaks.w)     # prepare input data file for a country#
vecs$reporting<-as.numeric(is.na(vecs$outbreaks))#
vecs$parameters<-rep(NA,7)#
#
lower<-c(-1,-3,-5,-5,-5,1,1)		#set bounds for search -- this is the prior #
upper<-c( 3, 3, 0, 2, 0,7,5)		#set bounds for search -- this is the prior#
#
iter<-1000#
#
ll<-numeric(iter)#
par<-matrix(runif(7*iter,lower,upper),iter,7,byrow=T)#
for(i in 1:iter){#
vecs$parameters<-rep(NA,7)#
ll[i]<--pf.bb.gomp(par[i,],vecs,lik=1,n.particles=5000)#
cat(i,".\n")#
}#
#
ll[ll==-999]<-0#
ind<-sample(1:1000,1000,exp(ll)-1,replace=T)#
post1<-par[ind,]#
#
lower<-apply(post1,2,range)[1,]#
upper<-apply(post1,2,range)[2,]#
#
iter<-1000#
ll<-numeric(iter)#
par<-matrix(runif(7*iter,lower,upper),iter,7,byrow=T)#
#
for(i in 1:iter){#
vecs$parameters<-rep(NA,7)#
ll[i]<--pf.bb.gomp(par[i,],vecs,lik=1,n.particles=5000)#
cat(i,".\n")#
}#
#
ll[ll==-999]<-0#
ind<-sample(1:1000,1000,exp(ll)-1,replace=T)#
post2<-par[ind,]
pairs(post2),pch=19,col=rgb(1,0,0,.1))
pairs(post2,pch=19,col=rgb(1,0,0,.1))
par(mfrow=c(2,4));apply(post2,2,hist,breaks=seq(-5,5,length=100))
apply(post2,2,range)
par(mfrow=c(2,4));apply(post2,2,hist,breaks=seq(-5,7,length=100))
pairs(post2,pch=19,col=rgb(1,0,0,.1))
w<-1#
#
n.years<-dim(allcases)[2]        # total year number, can change#
allcases.w<-allcases[w,first.surveillance[w]:n.years]       # get data for that province#
allbirths.w<-allbirths[w,first.surveillance[w]:n.years]#
alldeaths.w<-alldeaths[w,first.surveillance[w]:n.years]#
allpop.w<-allpop[w,first.surveillance[w]:n.years]#
allmcv1.w<-allmcv1[w,first.surveillance[w]:n.years]#
mcv1.12mo.w<-mcv1.12mo[w,1]#
allmcv2.w<-allmcv2[w,first.surveillance[w]:n.years]#
allsia.w<-allsia[w,first.surveillance[w]:n.years]#
outbreaks.w<-outbreaks[w,first.surveillance[w]:n.years]#
vecs<-datainput(allbirths.w,allcases.w,alldeaths.w,allpop.w,allsia.w,allmcv1.w,mcv1.12mo.w,allmcv2.w,outbreaks.w)     # prepare input data file for a country#
vecs$reporting<-as.numeric(is.na(vecs$outbreaks))#
vecs$parameters<-rep(NA,7)#
#
lower<-c(-1,-3,-5,-5,-5,1,1)		#set bounds for search -- this is the prior #
upper<-c( 3, 3, 0, 2, 0,7,5)		#set bounds for search -- this is the prior#
#
iter<-5000#
#
ll<-numeric(iter)#
par1<-matrix(runif(7*iter,lower,upper),iter,7,byrow=T)#
for(i in 1:iter){#
vecs$parameters<-rep(NA,7)#
ll[i]<--pf.bb.gomp(par1[i,],vecs,lik=1,n.particles=5000)#
cat(i,".\n")#
}#
#
ll[ll==-999]<-0#
ind<-sample(1:iter,iter,exp(ll)-1,replace=T)#
post1<-par1[ind,]#
#
lower<-apply(post1,2,range)[1,]#
upper<-apply(post1,2,range)[2,]#
#
iter<-5000#
ll<-numeric(iter)#
par2<-matrix(runif(7*iter,lower,upper),iter,7,byrow=T)#
#
for(i in 1:iter){#
vecs$parameters<-rep(NA,7)#
ll[i]<--pf.bb.gomp(par2[i,],vecs,lik=1,n.particles=5000)#
cat(i,".\n")#
}#
#
ll[ll==-999]<-0#
ind<-sample(1:iter,iter,exp(ll)-1,replace=T)#
post2<-par2[ind,]#
#
save(par1,par2,post1,post2,ll,file="bayes.tst.Rdat")
rm(list=ls())
library(maptools)
mp<-readShapeSpatial("BRA_adm3")
mp@data
dim(mp@data)
head(mp@data)
sumamry(mp@data)
summary(mp@data)
grep("Pauolo",mp@data$NAME_1)
grep("Paulo",mp@data$NAME_1)
which(mp@data$NAME_1=="S<e3>o Paulo")
which(mp@data$NAME_3=="Cursino")
mp@data$NAME_3[7777,]
mp@data$[7777,]
mp@data[7777,]
log(-999)
log(999)
?utf8ToInt
?iconv
iconvlist()
require(tau)
translate("S<e3>o Paulo")
utf8ToInt("S<e3>o Paulo")
texte <- "Hé hé"
texte2 <-  iconv(texte,"latin1","UTF-8")
texte2
iconv("S<e3>o Paulo","UTF-8","latin1")
?grep
iconv("S\xe3o Paulo","UTF-8","latin1")
?Encoding
Encoding("bob")
grep("\x","S\xe3o Paulo")
grep("\\x","S\xe3o Paulo")
grep("\","S\xe3o Paulo")
grep("\\x","S\xe3o Paulo")
grep("x","S\xe3o Paulo")
grep("x","Sxe3o Paulo")
?glob2rx
glob2rx("S\xe3o Paulo")
grep("\\\x","S\xe3o Paulo")
grep(\\"\x","S\xe3o Paulo")
strsplit("\\\","S\xe3o Paulo")
strsplit("\\\","S\\\xe3o Paulo")
which(mp@data$NAME_3=="Tucuruvi")
which(mp@data$NAME_3=="Santo Amaro")
mp@data[which(mp@data$NAME_3=="Santo Amaro"),]
write.csv(mp@data,file="mp.data.csv")
